openapi: 3.0.2
info:
  title: 'Store Management API'
  version: '0.1.1'
  description: 'Store Management API currently supports: product management, order status management'
  contact:
    email: v.alishauskaite@gmail.com
paths:
  /products/:
    get:
      operationId: listProducts
      description: 'Display a list of products.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: 'Success'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
      tags:
      - products
    post:
      operationId: createProduct
      description: 'Add a new product.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: 'Success: new product created.'
        '400':
          description: 'Bad request: bad product data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
      tags:
      - products
  /products/{id}/:
    get:
      operationId: retrieveProduct
      description: 'Retrieve single product data'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: 'Success'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not Found: specified product was not found.'
      tags:
      - products
    put:
      operationId: updateProduct
      description: 'Product data update'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: 'Success: product updated'
        '400':
          description: 'Bad request: bad product data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
    patch:
      operationId: partialUpdateProduct
      description: 'Partial product data update'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: 'Success: product patched.'
        '400':
          description: 'Bad request: bad product data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
    delete:
      operationId: destroyProduct
      description: 'Delete product'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      responses:
        '204':
          description: 'No Content: product deleted'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
  /products/{product_id}/stock/:
    get:
      operationId: retrieveProductStocks
      description: 'Display products in stock.'
      parameters:
      - name: product_id
        in: path
        required: true
        description: 'Product ID: a unique integer value identifying this product.'
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: 'Success'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
    post:
      operationId: createProductStock
      description: 'Update product stock by creating a new stock entry.'
      parameters:
      - name: product_id
        in: path
        required: true
        description: 'Product ID: a unique integer value identifyin this product.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: 'Success: new stock entry created.'
        '400':
          description: 'Bad request: bad product stock data.'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
  /products/{product_id}/stock/add/:
    post:
      operationId: createProductAddStock
      description: 'Increase product stock'
      parameters:
      - name: product_id
        in: path
        required: true
        description: 'Product ID: a unique product identifier.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: 'Success: product stock increased.'
        '400':
          description: 'Bad request: bad product stock data.'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
  /products/{product_id}/stock/reduce/:
    post:
      operationId: createProductReduceStock
      description: 'Decrease product stock'
      parameters:
      - name: product_id
        in: path
        required: true
        description: 'Product ID: a unique product identifier.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified product was not found.'
      tags:
      - products
  /orders/:
    get:
      operationId: listOrders
      description: 'Display orders'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: 'Success: product stock reduced.'
        '400':
          description: 'Bad request: bad product stock data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
      tags:
      - orders
  /orders/{id}/:
    get:
      operationId: retrieveOrder
      description: 'Display specified order'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this order.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: 'Success'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order was not found.'
      tags:
      - orders
  /orders/{order_id}/status/:
    get:
      operationId: listOrderStatusListCreates
      description: 'Display order status list (status change history).'
      parameters:
      - name: order_id
        in: path
        required: true
        description: 'Order ID: a unique integer value identifying this order.'
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: 'Success'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order was not found.'
      tags:
      - orders
    post:
      operationId: createOrderStatusList
      description: 'Create new order status'
      parameters:
      - name: order_id
        in: path
        required: true
        description: 'Order ID: a unique integer value identifying this order.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: 'Success: new order status entry created.'
        '400':
          description: 'Bad request: bad order status data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order was not found.'
      tags:
      - orders
  /orders/status/{id}/:
    get:
      operationId: retrieveOrderStatus
      description: 'Display order status history.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this order status.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
          description: 'Success: order status history displayed.'
      tags:
      - orders
    put:
      operationId: updateOrderStatus
      description: 'Update order status'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this order status.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
          description: 'Success: order status updated.'
        '400':
          description: 'Bad request: bad order status data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order status was not found.'
      tags:
      - orders
    patch:
      operationId: partialUpdateOrderStatus
      description: 'Partial order status update.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this order status.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
          description: 'Success: order status patched.'
        '400':
          description: 'Bad request: bad order status data'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order status was not found.'
      tags:
      - orders
    delete:
      operationId: destroyOrderStatus
      description: 'Delete specified order status'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this order status.
        schema:
          type: string
      responses:
        '204':
          description: 'No Content: Order status deleted.'
        '401':
          description: 'Unauthorized access: authentication required.'
        '403':
          description: 'Forbidden access: authorization required.'
        '404':
          description: 'Not found: specified order was not found.'
      tags:
      - orders
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 128
        code:
          type: string
          maxLength: 10
        price:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 1000000
          minimum: -1000000
        unit:
          type: string
          maxLength: 12
        available_stock:
          type: string
          readOnly: true
      required:
      - name
      - code
      - price
      - unit
    Order:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        email:
          type: string
          format: email
          maxLength: 254
        address:
          type: string
          maxLength: 255
        postal_code:
          type: string
          maxLength: 32
        city:
          type: string
          maxLength: 64
        country:
          type: string
          maxLength: 64
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        number_of_items:
          type: string
          readOnly: true
        total_cost:
          type: string
          readOnly: true
      required:
      - first_name
      - last_name
      - email
      - address
      - postal_code
      - city
      - country
    OrderDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        email:
          type: string
          format: email
          maxLength: 254
        address:
          type: string
          maxLength: 255
        postal_code:
          type: string
          maxLength: 32
        city:
          type: string
          maxLength: 64
        country:
          type: string
          maxLength: 64
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: object
                properties:
                  name:
                    type: string
                    maxLength: 128
                  code:
                    type: string
                    maxLength: 10
                  price:
                    type: string
                    format: decimal
                    multipleOf: 0.01
                    maximum: 1000000
                    minimum: -1000000
                  unit:
                    type: string
                    maxLength: 12
                required:
                - name
                - code
                - price
                - unit
              quantity:
                type: integer
              cost:
                type: string
                readOnly: true
            required:
            - product
          readOnly: true
        total_cost:
          type: string
          readOnly: true
        recent_status:
          type: string
          readOnly: true
        status_updates:
          type: array
          items:
            type: object
            properties:
              status_name:
                type: string
              create_timestamp:
                type: string
                format: date-time
                readOnly: true
            required:
            - status_name
      required:
      - first_name
      - last_name
      - email
      - address
      - postal_code
      - city
      - country
      - status_updates
    OrderStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order_id:
          type: integer
        status:
          type: string
          maxLength: 1
        status_name:
          type: string
          readOnly: true
        create_timestamp:
          type: string
          format: date-time
        comment:
          type: string
          maxLength: 255
      required:
      - order_id
      - status
      - create_timestamp
      - comment
